// Generated by gencpp from file msg_gen/SimOne_Obstacle_Type.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_SIMONE_OBSTACLE_TYPE_H
#define MSG_GEN_MESSAGE_SIMONE_OBSTACLE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct SimOne_Obstacle_Type_
{
  typedef SimOne_Obstacle_Type_<ContainerAllocator> Type;

  SimOne_Obstacle_Type_()
    : SimOne_Obstacle_Type(0)  {
    }
  SimOne_Obstacle_Type_(const ContainerAllocator& _alloc)
    : SimOne_Obstacle_Type(0)  {
  (void)_alloc;
    }



   typedef uint32_t _SimOne_Obstacle_Type_type;
  _SimOne_Obstacle_Type_type SimOne_Obstacle_Type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Unknown)
  #undef ESimOne_Obstacle_Type_Unknown
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Pedestrian)
  #undef ESimOne_Obstacle_Type_Pedestrian
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Pole)
  #undef ESimOne_Obstacle_Type_Pole
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Car)
  #undef ESimOne_Obstacle_Type_Car
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Static)
  #undef ESimOne_Obstacle_Type_Static
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Bicycle)
  #undef ESimOne_Obstacle_Type_Bicycle
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Fence)
  #undef ESimOne_Obstacle_Type_Fence
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_RoadMark)
  #undef ESimOne_Obstacle_Type_RoadMark
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_TrafficSign)
  #undef ESimOne_Obstacle_Type_TrafficSign
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_TrafficLight)
  #undef ESimOne_Obstacle_Type_TrafficLight
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Rider)
  #undef ESimOne_Obstacle_Type_Rider
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Truck)
  #undef ESimOne_Obstacle_Type_Truck
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Bus)
  #undef ESimOne_Obstacle_Type_Bus
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_SpecialVehicle)
  #undef ESimOne_Obstacle_Type_SpecialVehicle
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Motorcycle)
  #undef ESimOne_Obstacle_Type_Motorcycle
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_Dynamic)
  #undef ESimOne_Obstacle_Type_Dynamic
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_GuardRail)
  #undef ESimOne_Obstacle_Type_GuardRail
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_SpeedLimitSign)
  #undef ESimOne_Obstacle_Type_SpeedLimitSign
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_BicycleStatic)
  #undef ESimOne_Obstacle_Type_BicycleStatic
#endif
#if defined(_WIN32) && defined(ESimOne_Obstacle_Type_RoadObstacle)
  #undef ESimOne_Obstacle_Type_RoadObstacle
#endif

  enum {
    ESimOne_Obstacle_Type_Unknown = 0u,
    ESimOne_Obstacle_Type_Pedestrian = 4u,
    ESimOne_Obstacle_Type_Pole = 5u,
    ESimOne_Obstacle_Type_Car = 6u,
    ESimOne_Obstacle_Type_Static = 7u,
    ESimOne_Obstacle_Type_Bicycle = 8u,
    ESimOne_Obstacle_Type_Fence = 9u,
    ESimOne_Obstacle_Type_RoadMark = 12u,
    ESimOne_Obstacle_Type_TrafficSign = 13u,
    ESimOne_Obstacle_Type_TrafficLight = 15u,
    ESimOne_Obstacle_Type_Rider = 17u,
    ESimOne_Obstacle_Type_Truck = 18u,
    ESimOne_Obstacle_Type_Bus = 19u,
    ESimOne_Obstacle_Type_SpecialVehicle = 20u,
    ESimOne_Obstacle_Type_Motorcycle = 21u,
    ESimOne_Obstacle_Type_Dynamic = 22u,
    ESimOne_Obstacle_Type_GuardRail = 23u,
    ESimOne_Obstacle_Type_SpeedLimitSign = 26u,
    ESimOne_Obstacle_Type_BicycleStatic = 27u,
    ESimOne_Obstacle_Type_RoadObstacle = 29u,
  };


  typedef boost::shared_ptr< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> const> ConstPtr;

}; // struct SimOne_Obstacle_Type_

typedef ::msg_gen::SimOne_Obstacle_Type_<std::allocator<void> > SimOne_Obstacle_Type;

typedef boost::shared_ptr< ::msg_gen::SimOne_Obstacle_Type > SimOne_Obstacle_TypePtr;
typedef boost::shared_ptr< ::msg_gen::SimOne_Obstacle_Type const> SimOne_Obstacle_TypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator1> & lhs, const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator2> & rhs)
{
  return lhs.SimOne_Obstacle_Type == rhs.SimOne_Obstacle_Type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator1> & lhs, const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbbe890f8de8c81efa3dbe51e035e460";
  }

  static const char* value(const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbbe890f8de8c81eULL;
  static const uint64_t static_value2 = 0xfa3dbe51e035e460ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/SimOne_Obstacle_Type";
  }

  static const char* value(const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ESimOne_Obstacle_Type_Unknown = 0\n"
"uint8 ESimOne_Obstacle_Type_Pedestrian = 4\n"
"uint8 ESimOne_Obstacle_Type_Pole = 5\n"
"uint8 ESimOne_Obstacle_Type_Car = 6\n"
"uint8 ESimOne_Obstacle_Type_Static = 7\n"
"uint8 ESimOne_Obstacle_Type_Bicycle = 8\n"
"uint8 ESimOne_Obstacle_Type_Fence = 9\n"
"uint8 ESimOne_Obstacle_Type_RoadMark = 12\n"
"uint8 ESimOne_Obstacle_Type_TrafficSign = 13\n"
"uint8 ESimOne_Obstacle_Type_TrafficLight = 15\n"
"uint8 ESimOne_Obstacle_Type_Rider = 17\n"
"uint8 ESimOne_Obstacle_Type_Truck = 18\n"
"uint8 ESimOne_Obstacle_Type_Bus = 19\n"
"uint8 ESimOne_Obstacle_Type_SpecialVehicle = 20\n"
"uint8 ESimOne_Obstacle_Type_Motorcycle = 21\n"
"uint8 ESimOne_Obstacle_Type_Dynamic = 22\n"
"uint8 ESimOne_Obstacle_Type_GuardRail = 23\n"
"uint8 ESimOne_Obstacle_Type_SpeedLimitSign = 26\n"
"uint8 ESimOne_Obstacle_Type_BicycleStatic = 27\n"
"uint8 ESimOne_Obstacle_Type_RoadObstacle = 29\n"
"uint32 SimOne_Obstacle_Type\n"
;
  }

  static const char* value(const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SimOne_Obstacle_Type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimOne_Obstacle_Type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::SimOne_Obstacle_Type_<ContainerAllocator>& v)
  {
    s << indent << "SimOne_Obstacle_Type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SimOne_Obstacle_Type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_SIMONE_OBSTACLE_TYPE_H

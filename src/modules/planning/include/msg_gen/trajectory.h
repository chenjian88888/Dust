// Generated by gencpp from file msg_gen/trajectory.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_TRAJECTORY_H
#define BEGINNER_TUTORIALS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/TrajectoryPoint.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct trajectory_
{
  typedef trajectory_<ContainerAllocator> Type;

  trajectory_()
    : pointsize(0)
    , trajectorypoint()  {
    }
  trajectory_(const ContainerAllocator& _alloc)
    : pointsize(0)
    , trajectorypoint(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _pointsize_type;
  _pointsize_type pointsize;

   typedef std::vector< ::msg_gen::TrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >> _trajectorypoint_type;
  _trajectorypoint_type trajectorypoint;





  typedef boost::shared_ptr< ::msg_gen::trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_

typedef ::msg_gen::trajectory_<std::allocator<void> > trajectory;

typedef boost::shared_ptr< ::msg_gen::trajectory > trajectoryPtr;
typedef boost::shared_ptr< ::msg_gen::trajectory const> trajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::trajectory_<ContainerAllocator1> & lhs, const ::msg_gen::trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.pointsize == rhs.pointsize &&
    lhs.trajectorypoint == rhs.trajectorypoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::trajectory_<ContainerAllocator1> & lhs, const ::msg_gen::trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00437a6e9159dfd5d56fc1a3be364b58";
  }

  static const char* value(const ::msg_gen::trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00437a6e9159dfd5ULL;
  static const uint64_t static_value2 = 0xd56fc1a3be364b58ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/trajectory";
  }

  static const char* value(const ::msg_gen::trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pointsize\n"
"TrajectoryPoint[] trajectorypoint\n"
"================================================================================\n"
"MSG: msg_gen/TrajectoryPoint\n"
"# 世界坐标系下的参数\n"
"float64 x     # x position\n"
"float64 y      # y position\n"
"float64 z      # z position\n"
"float64 theta  # yaw in rad\n"
"float64 kappa  # curvature曲率\n"
"float64 dkappa # curvature曲率导数\n"
"float64 v      # Tangential velocity\n"
"float64 a      # Tangential acceleration\n"
"# Frenet坐标系下的属性\n"
"float64 relative_time # relative_time\n"
"float64 absolute_time # 轨迹的绝对时间\n"
"float64 d             # lateral offset\n"
"float64 d_d           # lateral speed\n"
"float64 d_dd          # lateral acceleration\n"
"float64 s             # s position along spline\n"
"float64 s_d           # s speed\n"
"float64 s_dd          # s acceleration\n"
"\n"
"float64 s_ddd\n"
"float64 d_ddd\n"
;
  }

  static const char* value(const ::msg_gen::trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointsize);
      stream.next(m.trajectorypoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::trajectory_<ContainerAllocator>& v)
  {
    s << indent << "pointsize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pointsize);
    s << indent << "trajectorypoint[]" << std::endl;
    for (size_t i = 0; i < v.trajectorypoint.size(); ++i)
    {
      s << indent << "  trajectorypoint[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectorypoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_TRAJECTORY_H

// Generated by gencpp from file msg_gen/obstacle.msg
// DO NOT EDIT!


#ifndef MSG_GEN_MESSAGE_OBSTACLE_H
#define MSG_GEN_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_gen/SimOne_Data_Obstacle_Entry.h>

namespace msg_gen
{
template <class ContainerAllocator>
struct obstacle_
{
  typedef obstacle_<ContainerAllocator> Type;

  obstacle_()
    : obstacleSize(0)
    , obstacle()  {
    }
  obstacle_(const ContainerAllocator& _alloc)
    : obstacleSize(0)
    , obstacle(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _obstacleSize_type;
  _obstacleSize_type obstacleSize;

   typedef std::vector< ::msg_gen::SimOne_Data_Obstacle_Entry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msg_gen::SimOne_Data_Obstacle_Entry_<ContainerAllocator> >::other >  _obstacle_type;
  _obstacle_type obstacle;





  typedef boost::shared_ptr< ::msg_gen::obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_

typedef ::msg_gen::obstacle_<std::allocator<void> > obstacle;

typedef boost::shared_ptr< ::msg_gen::obstacle > obstaclePtr;
typedef boost::shared_ptr< ::msg_gen::obstacle const> obstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::obstacle_<ContainerAllocator1> & lhs, const ::msg_gen::obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.obstacleSize == rhs.obstacleSize &&
    lhs.obstacle == rhs.obstacle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::obstacle_<ContainerAllocator1> & lhs, const ::msg_gen::obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f016b1b50c206a0be297c01e5701b2e3";
  }

  static const char* value(const ::msg_gen::obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf016b1b50c206a0bULL;
  static const uint64_t static_value2 = 0xe297c01e5701b2e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/obstacle";
  }

  static const char* value(const ::msg_gen::obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 obstacleSize\n"
"SimOne_Data_Obstacle_Entry[] obstacle\n"
"================================================================================\n"
"MSG: msg_gen/SimOne_Data_Obstacle_Entry\n"
"int32 id\n"
"int32 viewId\n"
"SimOne_Obstacle_Type type\n"
"float64 theta\n"
"float64 posX\n"
"float64 posY\n"
"float64 posZ\n"
"float64 oriX\n"
"float64 oriY\n"
"float64 oriZ\n"
"float64 velX\n"
"float64 velY\n"
"float64 velZ\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"================================================================================\n"
"MSG: msg_gen/SimOne_Obstacle_Type\n"
"uint8 ESimOne_Obstacle_Type_Unknown = 0\n"
"uint8 ESimOne_Obstacle_Type_Pedestrian = 4\n"
"uint8 ESimOne_Obstacle_Type_Pole = 5\n"
"uint8 ESimOne_Obstacle_Type_Car = 6\n"
"uint8 ESimOne_Obstacle_Type_Static = 7\n"
"uint8 ESimOne_Obstacle_Type_Bicycle = 8\n"
"uint8 ESimOne_Obstacle_Type_Fence = 9\n"
"uint8 ESimOne_Obstacle_Type_RoadMark = 12\n"
"uint8 ESimOne_Obstacle_Type_TrafficSign = 13\n"
"uint8 ESimOne_Obstacle_Type_TrafficLight = 15\n"
"uint8 ESimOne_Obstacle_Type_Rider = 17\n"
"uint8 ESimOne_Obstacle_Type_Truck = 18\n"
"uint8 ESimOne_Obstacle_Type_Bus = 19\n"
"uint8 ESimOne_Obstacle_Type_SpecialVehicle = 20\n"
"uint8 ESimOne_Obstacle_Type_Motorcycle = 21\n"
"uint8 ESimOne_Obstacle_Type_Dynamic = 22\n"
"uint8 ESimOne_Obstacle_Type_GuardRail = 23\n"
"uint8 ESimOne_Obstacle_Type_SpeedLimitSign = 26\n"
"uint8 ESimOne_Obstacle_Type_BicycleStatic = 27\n"
"uint8 ESimOne_Obstacle_Type_RoadObstacle = 29\n"
"uint32 SimOne_Obstacle_Type\n"
;
  }

  static const char* value(const ::msg_gen::obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacleSize);
      stream.next(m.obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::obstacle_<ContainerAllocator>& v)
  {
    s << indent << "obstacleSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacleSize);
    s << indent << "obstacle[]" << std::endl;
    for (size_t i = 0; i < v.obstacle.size(); ++i)
    {
      s << indent << "  obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_gen::SimOne_Data_Obstacle_Entry_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GEN_MESSAGE_OBSTACLE_H

// Generated by gencpp from file msg_gen/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_TRAJECTORYPOINT_H
#define BEGINNER_TUTORIALS_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gen
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , dkappa(0.0)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , absolute_time(0.0)
    , d(0.0)
    , d_d(0.0)
    , d_dd(0.0)
    , s(0.0)
    , s_d(0.0)
    , s_dd(0.0)
    , s_ddd(0.0)
    , d_ddd(0.0)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)
    , kappa(0.0)
    , dkappa(0.0)
    , v(0.0)
    , a(0.0)
    , relative_time(0.0)
    , absolute_time(0.0)
    , d(0.0)
    , d_d(0.0)
    , d_dd(0.0)
    , s(0.0)
    , s_d(0.0)
    , s_dd(0.0)
    , s_ddd(0.0)
    , d_ddd(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _kappa_type;
  _kappa_type kappa;

   typedef double _dkappa_type;
  _dkappa_type dkappa;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;

   typedef double _relative_time_type;
  _relative_time_type relative_time;

   typedef double _absolute_time_type;
  _absolute_time_type absolute_time;

   typedef double _d_type;
  _d_type d;

   typedef double _d_d_type;
  _d_d_type d_d;

   typedef double _d_dd_type;
  _d_dd_type d_dd;

   typedef double _s_type;
  _s_type s;

   typedef double _s_d_type;
  _s_d_type s_d;

   typedef double _s_dd_type;
  _s_dd_type s_dd;

   typedef double _s_ddd_type;
  _s_ddd_type s_ddd;

   typedef double _d_ddd_type;
  _d_ddd_type d_ddd;





  typedef boost::shared_ptr< ::msg_gen::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gen::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::msg_gen::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::msg_gen::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::msg_gen::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gen::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_gen::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::msg_gen::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta == rhs.theta &&
    lhs.kappa == rhs.kappa &&
    lhs.dkappa == rhs.dkappa &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.relative_time == rhs.relative_time &&
    lhs.absolute_time == rhs.absolute_time &&
    lhs.d == rhs.d &&
    lhs.d_d == rhs.d_d &&
    lhs.d_dd == rhs.d_dd &&
    lhs.s == rhs.s &&
    lhs.s_d == rhs.s_d &&
    lhs.s_dd == rhs.s_dd &&
    lhs.s_ddd == rhs.s_ddd &&
    lhs.d_ddd == rhs.d_ddd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_gen::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::msg_gen::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_gen

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gen::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gen::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gen::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d676d087591771e9a70f0e764d0a9805";
  }

  static const char* value(const ::msg_gen::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd676d087591771e9ULL;
  static const uint64_t static_value2 = 0xa70f0e764d0a9805ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gen/TrajectoryPoint";
  }

  static const char* value(const ::msg_gen::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 世界坐标系下的参数\n"
"float64 x     # x position\n"
"float64 y      # y position\n"
"float64 z      # z position\n"
"float64 theta  # yaw in rad\n"
"float64 kappa  # curvature曲率\n"
"float64 dkappa # curvature曲率导数\n"
"float64 v      # Tangential velocity\n"
"float64 a      # Tangential acceleration\n"
"# Frenet坐标系下的属性\n"
"float64 relative_time # relative_time\n"
"float64 absolute_time # 轨迹的绝对时间\n"
"float64 d             # lateral offset\n"
"float64 d_d           # lateral speed\n"
"float64 d_dd          # lateral acceleration\n"
"float64 s             # s position along spline\n"
"float64 s_d           # s speed\n"
"float64 s_dd          # s acceleration\n"
"\n"
"float64 s_ddd\n"
"float64 d_ddd\n"
;
  }

  static const char* value(const ::msg_gen::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.dkappa);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.relative_time);
      stream.next(m.absolute_time);
      stream.next(m.d);
      stream.next(m.d_d);
      stream.next(m.d_dd);
      stream.next(m.s);
      stream.next(m.s_d);
      stream.next(m.s_dd);
      stream.next(m.s_ddd);
      stream.next(m.d_ddd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gen::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gen::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "kappa: ";
    Printer<double>::stream(s, indent + "  ", v.kappa);
    s << indent << "dkappa: ";
    Printer<double>::stream(s, indent + "  ", v.dkappa);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "relative_time: ";
    Printer<double>::stream(s, indent + "  ", v.relative_time);
    s << indent << "absolute_time: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_time);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "d_d: ";
    Printer<double>::stream(s, indent + "  ", v.d_d);
    s << indent << "d_dd: ";
    Printer<double>::stream(s, indent + "  ", v.d_dd);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "s_d: ";
    Printer<double>::stream(s, indent + "  ", v.s_d);
    s << indent << "s_dd: ";
    Printer<double>::stream(s, indent + "  ", v.s_dd);
    s << indent << "s_ddd: ";
    Printer<double>::stream(s, indent + "  ", v.s_ddd);
    s << indent << "d_ddd: ";
    Printer<double>::stream(s, indent + "  ", v.d_ddd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_TRAJECTORYPOINT_H
